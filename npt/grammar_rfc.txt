# Generic helpers

letter      = anything:x ?(x in ascii_letters)
punc        = anything:x ?(x in punctuation)
digit       = anything:x ?(x in '0123456789')
letterdigit = letter|digit
word        = <(letter|punc)+>:ls -> str(ls)

uppercase_letter = anything:x ?(x in ascii_uppercase)
lowercase_letter = anything:x ?(x in ascii_lowercase)
number           = <digit+>:ds -> int(ds)

tab = '   '
ws = ' '*
nl = '\n'

line = tab ws <((word|number) ws)+>:txt nl:newline -> txt+newline
paragraph_line = <tab ws>:indentation <((word|number) ws)+>:txt nl:newline -> indentation+txt+newline
t = paragraph_line+:lines -> rfc.T([rfc.Text("".join(lines))], None, None, None, None)
tocline = tab ws <(letter '.')?>:alpha <(number '.')*>:num ws (word ws)+ number? nl -> infer_toc(alpha, num)
section_name = <(number '.')+>:number ws <(word ws)+>:name nl -> (number.count('.'), name)
appendix_name = "Appendix " (letter '.') ws <(word ws)+>:name nl -> (1, name)
appendix_sub_name = (letter '.') <(number '.')+>:number ws <(word ws)+>:name nl -> (number.count('.')+1, name)

packet_header_id = ( "0                   1                   2                   3"
                   | "0                   1                   2"
                   | "0                   1"
                   | "0"
                   ) 
packet_header_type1 = <':'* ws packet_header_id>:hl -> hl 
packet_header_type2 = <':' ws ((word|number) ws)+ nl>:preamble 
                      ws <':' nl>:sep 
                      ws <':' ws packet_header_id>:header_fmt -> preamble+sep+header_fmt

ascii_packet_header  = ws 
                       ( packet_header_type1 | packet_header_type2 ):hl nl:newline 
                       -> hl+newline
ascii_packet_diag_ref = nl
                        tab ws <'Figure' ws number ('.' (letter+|number))*>:fig  ':' 
                        ws <((word|number|punc) ws)*>:title nl -> (fig, title)
ascii_packet_diagram = ascii_packet_header:header 
                       line+:lines 
                       ascii_packet_diag_ref?:fig_ref
                        -> rfc.Artwork( rfc.Text("".join([header] + lines)), 
                                        "left",
                                        None,
                                        fig_ref[0] if fig_ref else None,
                                        None, 
                                        fig_ref[1] if fig_ref else None,
                                        None, 
                                        None, 
                                        None, 
                                        None)
                                        


# RFC

rfc = front:(front_obj, doc_name_str, ipr_code, toc_depth)
      middle:middle_obj
      back:back_obj
                -> rfc.RFC([], 
                                 front_obj,
                                 middle_obj,
                                 back_obj,
                                 None,
                                 None,
                                 doc_name_str,
                                 True,
                                 ipr_code,
                                 None,
                                 None,
                                 None,
                                 None,
                                 None,
                                 None,
                                 "IETF",
                                 True,
                                 toc_depth,
                                 True,
                                 None,
                                 "3")

# Middle

section = section_name:(depth, name) nl ((ascii_packet_diagram|t):text nl -> text)*:ts
                         -> (depth, rfc.Section(rfc.Name([rfc.Text(name)]),
                                        ts,
                                        [],
                                        None,
                                        True,
                                        False,
                                        None,
                                        "default"))

middle = section+:sections -> rfc.Middle(structure_subsections(sections))

# Back

author_addr_blocks = "Authors' Addresses" nl nl (line+ nl)+:author_addr_block

appendix = (appendix_name|appendix_sub_name):(depth, name) nl (t:text nl -> text)*:ts -> (depth, rfc.Section(rfc.Name([rfc.Text(name)]),
                                    ts,
                                    [],
                                    None,
                                    True,
                                    False,
                                    None,
                                    "default"))

back = appendix+:appendices author_addr_blocks -> rfc.Back([],
                                        [],
                                        structure_subsections(appendices))

# Front

header_line = ws ((word|number) ws)+ nl
title = ws <(word ws)+>:title_str ws -> rfc.Title(rfc.Text(title_str), None, None)
doc_name = ws <((word|number) ws)>+:doc_name ws -> "".join(doc_name)

abstract = "Abstract" nl nl t+:ts -> rfc.Abstract(ts, None)

status = "Status of This Memo" nl nl (line+ nl)+:text -> get_doc_series(text)
ipr = "Copyright Notice" nl nl (line+ nl)+:text -> get_ipr_code(text)
toc = "Table of Contents" nl nl tocline+:toc_depth nl -> str(max(toc_depth))

front = header_line+ nl
        title:title_obj nl
        doc_name:doc_name_str nl
        abstract:abstract_obj nl
        status:status_name
        ipr:ipr_code
        toc:toc_depth
                -> (rfc.Front(title_obj, [rfc.SeriesInfo(status_name, doc_name_str, status_name, None, None, doc_name_str)], [], None, [], [], [], abstract_obj, [], None), doc_name_str, ipr_code, toc_depth)
